#!/usr/bin/env python

import os
import argparse
from scrna_tools.mapping import rhapsody_demultiplex
import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)


def main():
    parser = argparse.ArgumentParser(
        description='A Rhapsody preprocessing script.'
    )

    parser.add_argument(
        'barcodes_files',
        help='First FASTQ file (with processed barcode and UMI reads). Split multiple files with a comma.'
    )
    
    parser.add_argument(
        'reads_files',
        help='Second FASTQ file (with mRNA/cDNA reads and sample tag). Split multiple files with a comma.'
    )
    
    parser.add_argument(
        'genome',
        help='Genome used for sample tags (mm or hg)'
    )
    
    parser.add_argument(
        'output_folder',
        help='Output folder for split FASTQ files'
    )
    
    parser.add_argument(
        '-p', '--prefix', dest='prefix',
        default="sample",
        help='Output file prefix (default "sample")'
    )
    
    parser.add_argument(
        '-w', '--whitelists', dest='whitelists',
        nargs='+',
        help='BD Rhapsody barcode whitelists - one for each CLS part.'
    )
    
    parser.add_argument(
        '-n', '--noise-plot', dest='expected_noise_plot',
        help='Output file for noise plot (only in legacy mode)'
    )
    
    parser.add_argument(
        '-m', '--mismatches', dest='mismatches',
        default=2, type=int,
        help='Number of allowed mismatches. Default: 2',
    )
    
    parser.add_argument(
        '-c', '--counts-plot', dest='sample_tag_counts_plot',
        help='Output file for sample tag counts plot (only in legacy mode)'
    )
    
    parser.add_argument(
        '--legacy', dest='legacy_mode',
        default=False, action='store_true',
        help='Use legacy adapters. Default is to use enhanced bead adapters.',
    )
    
    parser.add_argument(
        '-s', '--statistics-file', dest='statistics_file',
        help='Output file for sample tag statistics.'
    )
    
    parser.add_argument(
        '--only-statistics', dest='only_statistics',
        default=False, action='store_true',
        help='Only output stats (including stats files, if provided), no demultiplexing.',
    )

    args = parser.parse_args()

    barcodes_files = [os.path.expanduser(file_name) for file_name in args.barcodes_files.split(',')]
    reads_files = [os.path.expanduser(file_name) for file_name in args.reads_files.split(',')]
    demultiplex_genome = args.genome
    output_folder = os.path.expanduser(args.output_folder)
    prefix = args.prefix
    legacy_mode = args.legacy_mode
    mismatches = args.mismatches
    expected_noise_plot = os.path.expanduser(args.expected_noise_plot) if args.expected_noise_plot else None
    sample_tag_counts_plot = os.path.expanduser(args.sample_tag_counts_plot) if args.sample_tag_counts_plot else None
    statistics_file = args.statistics_file
    only_stats = args.only_statistics
    whitelist_files = args.whitelists or []
    
    whitelists = None
    if whitelist_files is not None:
        whitelists = []
        for whitelist_file in whitelist_files:
            if not os.path.exists(whitelist_file):
                logger.error(f"Whitelist file {whitelist_file} does not exist.")
                exit(1)
            with open(whitelist_file, 'r') as f:
                whitelist = set(f.read().splitlines())
                whitelists.append(whitelist)

    barcode_sample, output_files = rhapsody_demultiplex(
        barcodes_files, 
        reads_files, 
        demultiplex_genome,
        output_folder=output_folder if not only_stats else None, 
        prefix=prefix,
        expected_noise_plot=expected_noise_plot,
        sample_tag_counts_plot=sample_tag_counts_plot,
        statistics_file=statistics_file,
        mismatches=mismatches,
        barcode_version='legacy' if legacy_mode else 'enhanced',
        whitelists=whitelists,
    )


if __name__ == '__main__':
    main()
