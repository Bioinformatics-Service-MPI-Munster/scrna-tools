#!/usr/bin/env python

import os
import argparse
from scrna_tools.mapping import rhapsody_demultiplex
from distutils.dir_util import copy_tree
from collections import defaultdict
import logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)


def main():
    parser = argparse.ArgumentParser(
        description='A Rhapsody preprocessing script.'
    )

    parser.add_argument(
        'barcodes_file',
        help='First FASTQ file (with processed barcode and UMI reads)'
    )
    
    parser.add_argument(
        'reads_file',
        help='Second FASTQ file (with mRNA/cDNA reads and sample tag)'
    )
    
    parser.add_argument(
        'genome',
        help='Genome used for sample tags (mm or hg)'
    )
    
    parser.add_argument(
        'output_folder',
        help='Output folder for split FASTQ files'
    )
    
    parser.add_argument(
        '-p', '--prefix', dest='prefix',
        default="sample",
        help='Output file prefix (default "sample")'
    )
    
    parser.add_argument(
        '-n', '--noise-plot', dest='expected_noise_plot',
        help='Output file for noise plot'
    )
    
    parser.add_argument(
        '-c', '--counts-plot', dest='sample_tag_counts_plot',
        help='Output file for sample tag counts plot'
    )

    args = parser.parse_args()

    barcodes_file= os.path.expanduser(args.barcodes_file)
    reads_file= os.path.expanduser(args.reads_file)
    demultiplex_genome = args.genome
    output_folder = os.path.expanduser(args.output_folder)
    prefix = args.prefix
    expected_noise_plot = os.path.expanduser(args.expected_noise_plot) if args.expected_noise_plot else None
    sample_tag_counts_plot = os.path.expanduser(args.sample_tag_counts_plot) if args.sample_tag_counts_plot else None

    barcode_sample, output_files = rhapsody_demultiplex(
        barcodes_file, reads_file, demultiplex_genome,
        output_folder=output_folder, prefix=prefix,
        expected_noise_plot=expected_noise_plot,
        sample_tag_counts_plot=sample_tag_counts_plot
    )

if __name__ == '__main__':
    main()
